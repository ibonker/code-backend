<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hotpotmaterial.code.dao.DatabaseDao">

	<select id="findTableList" resultType="org.hotpotmaterial.code.entity.TablePO">
		<if test="dbName == 'oracle'">
			SELECT
			t.TABLE_NAME AS name,
			c.COMMENTS AS comments
			FROM user_tables t,
			user_tab_comments c
			WHERE t.table_name = c.table_name
			<if test="name != null and name != ''">
				AND t.TABLE_NAME = lower(#{name})
			</if>
			ORDER BY
			t.TABLE_NAME
		</if>
		<if test="dbName == 'mysql'">
			SELECT t.table_name AS name,t.TABLE_COMMENT AS comments
			FROM
			information_schema.TABLES t
			WHERE t.TABLE_SCHEMA = (select
			database())
			<if test="name != null and name != ''">
				AND t.TABLE_NAME = lower(#{name})
			</if>
		</if>
	</select>

	<select id="findTable" resultType="org.hotpotmaterial.code.entity.TablePO">
		<if test="dbName == 'oracle'">
			SELECT t.TABLE_NAME AS name,
			c.COMMENTS AS comments
			FROM
			user_tables t,
			user_tab_comments c
			WHERE t.table_name = c.table_name
			AND t.table_name= upper(#{name})
		</if>
		<if test="dbName == 'mysql'">
			SELECT t.table_name AS
			name,t.TABLE_COMMENT AS comments
			FROM information_schema.TABLES t
			WHERE t.TABLE_SCHEMA = (select
			database())
			AND t.TABLE_NAME= #{name}
		</if>
	</select>

	<select id="findTableColumnList" resultType="org.hotpotmaterial.code.entity.ColumnPO">
		<if test="dbName == 'oracle'">
			SELECT
			t.COLUMN_NAME AS name,<!-- t.DATA_TYPE, t.DATA_LENGTH, t.DATA_PRECISION, 
				t.DATA_SCALE, -->
			(CASE WHEN t.NULLABLE = 'Y' THEN '1' ELSE '0' END) AS isNullable,
			c.COMMENTS AS comments,
			decode(t.DATA_TYPE,'DATE',t.DATA_TYPE || '('
			|| t.DATA_LENGTH || ')',
			'VARCHAR2', t.DATA_TYPE || '(' ||
			t.DATA_LENGTH || ')',
			'VARCHAR',
			t.DATA_TYPE || '(' || t.DATA_LENGTH ||
			')',
			'NVARCHAR2', t.DATA_TYPE
			|| '(' || t.DATA_LENGTH/2 || ')',
			'CHAR',
			t.DATA_TYPE || '(' ||
			t.DATA_LENGTH || ')',
			'NUMBER',t.DATA_TYPE ||
			(nvl2(t.DATA_PRECISION,nvl2(decode(t.DATA_SCALE,0,null,t.DATA_SCALE),
			'(' || t.DATA_PRECISION || ',' || t.DATA_SCALE || ')',
			'(' ||
			t.DATA_PRECISION || ')'),'(18)')),t.DATA_TYPE) AS jdbcType,
			t.data_length as max
			FROM
			user_tab_columns t, user_col_comments c
			WHERE
			t.TABLE_NAME =
			c.table_name
			AND t.COLUMN_NAME = c.column_name
			<if test="name != null and name != ''">
				AND t.TABLE_NAME = upper(#{name,jdbcType=VARCHAR})
			</if>
			ORDER BY t.COLUMN_ID
		</if>
		<if test="dbName == 'mysql'">
			SELECT t.COLUMN_NAME AS name, (CASE WHEN t.IS_NULLABLE = 'YES' THEN
			'1' ELSE '0' END) AS isNullable,
			t.COLUMN_COMMENT AS
			comments,t.COLUMN_TYPE AS jdbcType,
			t.CHARACTER_MAXIMUM_LENGTH as max
			FROM
			information_schema.COLUMNS t
			WHERE t.TABLE_SCHEMA = (select
			database())
			<if test="name != null and name != ''">
				AND t.TABLE_NAME = #{name,jdbcType=VARCHAR}
			</if>
			ORDER BY t.ORDINAL_POSITION
		</if>
	</select>

	<select id="findTablePK" resultType="string">
		<if test="dbName == 'oracle'">
			SELECT lower(cu.COLUMN_NAME) AS columnName
			FROM
			user_cons_columns cu, user_constraints au
			WHERE cu.constraint_name =
			au.constraint_name
			AND au.constraint_type = 'P'
			AND au.table_name =
			upper(#{name})
		</if>
		<if test="dbName == 'mysql'">
			SELECT lower(au.COLUMN_NAME) AS columnName
			FROM
			information_schema.COLUMNS au
			WHERE au.TABLE_SCHEMA = (select
			database())
			AND au.COLUMN_KEY='PRI' AND au.TABLE_NAME = #{name}
		</if>
	</select>

	<select id="existTable" parameterType="String" resultType="Integer">
		<if test="dbName == 'oracle'">
			SELECT count(1)
			FROM
			user_tables t,
			user_tab_comments c
			WHERE
			t.table_name = c.table_name
			AND t.table_name= upper(#{tableName})
		</if>
		<if test="dbName == 'mysql'">
			select count(1)
			from INFORMATION_SCHEMA.TABLES
			where
			TABLE_SCHEMA=#{dataSourceName}
			and TABLE_NAME=#{tableName}
		</if>
	</select>

	<select id="findDictValueByCode" parameterType="String"
		resultType="org.hotpotmaterial.code.entity.DictValuePO">
		SELECT * FROM dict_value WHERE dict_code = #{dictCode} AND
		del_flag = #{delFlag}
	</select>

	<insert id="saveDictValue" parameterType="org.hotpotmaterial.code.entity.DictValuePO">
		INSERT INTO
		dict_value(id,name,value,dict_code,sort,created_by,created_at,updated_by,updated_at,del_flag)
		VALUES
		(#{dictValue.id}, #{dictValue.name}, #{dictValue.value},
		#{dictValue.dictCode},
		#{dictValue.sort},
		#{dictValue.createdBy},
		#{dictValue.createdAt}, #{dictValue.updatedBy},
		#{dictValue.updatedAt}, #{dictValue.delFlag})
	</insert>

	<update id="updateDictValue" parameterType="org.hotpotmaterial.code.entity.DictValuePO">
		UPDATE dict_value
		SET
		name = #{dictValue.name}, value = #{dictValue.value}, dict_code =
		#{dictValue.dictCode}, sort = #{dictValue.sort},
		created_by =
		#{dictValue.createdBy}, created_at = #{dictValue.createdAt},updated_by
		= #{dictValue.updatedBy},
		updated_at = #{dictValue.updatedAt}
		WHERE id = #{dictValue.id}
	</update>

	<update id="deleteDictValue" parameterType="String">
		UPDATE dict_value SET
		del_flag = #{delFlag} WHERE id = #{id}
	</update>

	<update id="deleteDictValues" parameterType="String">
		UPDATE dict_value
		SET del_flag = #{delFlag}
		WHERE
		dict_code
		= #{dictCode}
	</update>

	<select id="findDictTypeByCode" parameterType="String"
		resultType="Integer">
		SELECT count(1) FROM dict_type WHERE code = #{code} AND
		del_flag = #{delFlag}
	</select>

	<insert id="insertDictType" parameterType="org.hotpotmaterial.code.entity.DictTypePO">
		INSERT INTO
		dict_type(id, code, name, created_by, created_at, updated_by,
		updated_at, del_flag)
		VALUES
		(#{dictType.id}, #{dictType.code},
		#{dictType.name}, #{dictType.createdBy}, #{dictType.createdAt},
		#{dictType.updatedBy}, #{dictType.updatedAt}, #{dictType.delFlag})
	</insert>

	<select id="findDictTypes" parameterType="String"
		resultType="org.hotpotmaterial.code.entity.DictTypePO">
		SELECT * FROM dict_type WHERE del_flag = #{delFlag}
	</select>

	<update id="creatDictType">
		<if test="dbName == 'mysql'">
		create table dict_type (
		id varchar(64) not null primary key,
		code varchar(64) not null,
		name varchar(255) not null,
		created_by varchar(64),
		created_at datetime not null,
		updated_by varchar(64),
		updated_at datetime not null,
		del_flag char(1) not null
		)
		</if>
		<if test="dbName == 'oracle'">
		create table dict_type (
		id varchar2(64) not null primary key,
		code varchar2(64) not null,
		name varchar2(255) not null,
		created_by varchar2(64),
		created_at DATE,
		updated_by varchar2(64),
		updated_at DATE,
		del_flag varchar2(1)
		)
		</if>
	</update>

	<update id="creatDictValue">
		<if test="dbName == 'mysql'">
		create table dict_value (
		id varchar(64) not null primary key,
		name varchar(64) not null,
		value varchar(255) not null,
		dict_code varchar(64) not null,
		sort int(11),
		created_by varchar(64),
		created_at datetime,
		updated_by varchar(64),
		updated_at datetime,
		del_flag char(1)
		)
		</if>
		<if test="dbName == 'oracle'">
		create table dict_value (
		id varchar2(64) not null primary key,
		name varchar2(64) not null,
		value varchar2(255) not null,
		dict_code varchar2(64) not null,
		sort NUMBER(11),
		created_by varchar2(64),
		created_at DATE,
		updated_by varchar2(64),
		updated_at DATE,
		del_flag varchar2(1)
		)
		</if>
	</update>
	
	<update id="createUiConfig">
		<if test="dbName == 'mysql'">
		create table ui_config (
		  id varchar(64) NOT NULL primary key,
		  json_schema_url varchar(255) ,
		  config_name varchar(255) ,
		  pathmag mediumtext,
		  tab_config_data mediumtext,
		  form_config_data mediumtext,
		  table_mapping_name varchar(255) ,
		  table_btn_configs mediumtext,
		  table_row_btn_configs mediumtext,
		  form_btn_configs mediumtext,
		  created_at datetime ,
		  created_by varchar(255) ,
		  updated_at datetime ,
		  updated_by varchar(255) 
		)
		</if>
		<if test="dbName == 'oracle'">
		create table ui_config (
		  id VARCHAR2(64) NOT NULL primary key,
		  json_schema_url VARCHAR2(255) ,
		  config_name VARCHAR2(255) ,
		  pathmag CLOB,
		  tab_config_data CLOB,
		  form_config_data CLOB,
		  table_mapping_name VARCHAR2(255) ,
		  table_btn_configs CLOB,
		  table_row_btn_configs CLOB,
		  form_btn_configs CLOB,
		  created_at DATE ,
		  created_by VARCHAR2(255) ,
		  updated_at DATE ,
		  updated_by VARCHAR2(255) 
		)
		</if>
	</update>
	
	<insert id="insertResAdminUser" parameterType="java.lang.String">
		INSERT INTO hotpot_role_user VALUES ('9999', #{partyId}, null, null, '0')
	</insert>
	
</mapper>