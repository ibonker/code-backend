<?xml version="1.0" encoding="UTF-8"?>
<template>
	<name>gradleBuild</name>
	<filePath>/</filePath>
	<fileName>build.gradle</fileName>
	<content><![CDATA[
buildscript {
    repositories {
        maven { 
            url maven_repo
        }
    }
    
    dependencies {
       classpath("org.springframework.boot:spring-boot-gradle-plugin:${r'$'}{spring_boot_version}")
       classpath("io.spring.gradle:dependency-management-plugin:${r'$'}{spring_dep_version}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    maven { 
        url maven_repo
    }
}


group = group_name
    
sourceCompatibility = java_version
targetCompatibility = java_version
    
configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}
    
dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile "org.springframework.boot:spring-boot-starter-aop"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	<#if components?seq_contains("enablesecurity")>
	compile "org.springframework.boot:spring-boot-starter-security"
	compile "io.jsonwebtoken:jjwt:0.9.0"
	</#if>
	<#if components?seq_contains("ressecurity")>
	compile "org.springframework.boot:spring-boot-starter-security"
	</#if>
    compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:${r'$'}{mybatis_spring_version}"
    
    compile "io.springfox:springfox-swagger2:${r'$'}{swagger_version}"
  	compile "io.springfox:springfox-swagger-ui:${r'$'}{swagger_version}"
    compile "com.alibaba:druid-spring-boot-starter:${r'$'}{druid_version}"
    <#if hasOracle == "1">
    compile "com.oracle:ojdbc6:${r'$'}{oracle_version}"
    </#if>
    <#if hasMysql == "1">
    compile "mysql:mysql-connector-java:${r'$'}{mysql_version}"
    </#if>
 
    compile "com.google.guava:guava:${r'$'}{guava_version}"
    compile "org.projectlombok:lombok:${r'$'}{lombok_version}"
    compile "org.mybatis:mybatis-typehandlers-jsr310:${r'$'}{mybatis_typehandlers_jsr310_version}"
    compile "com.github.pagehelper:pagehelper:${r'$'}{pagehelper_version}"
    compile "com.github.pagehelper:pagehelper-spring-boot-starter:${r'$'}{pagehelper_spring_boot_starter_version}"
    
    compile "org.hotpotmaterial:hotpotmaterial-common:${r'$'}{hotpotmaterial_common_version}"
    compile "org.hotpotmaterial:hotpotmaterial-jsonmeta:${r'$'}{hotpotmaterial_jsonmeta_version}"
    compile "org.apache.poi:poi:3.17"
    compile "org.apache.poi:poi-ooxml:3.17"
    
    compile "org.json:json:20160810"
    
    // http://git.changan.com/titanotp/design/blob/master/API/app-manage-service/app_manage_sdk.md
    compile "com.changan:titan-app-manage-sdk:0.0.10-SNAPSHOT"
    
    compile "de.codecentric:spring-boot-admin-starter-client:2.0.0"
    
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

bootJar {
    baseName = jar_name
    version =  jar_version
}

task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst('/file:/+/', '/')
            }.join(' ')
        }
    }
}

bootRun {
    dependsOn pathingJar
    doFirst {
        classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", pathingJar.archivePath)
    }
}

]]>
	</content>
</template>