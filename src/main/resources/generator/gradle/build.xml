<?xml version="1.0" encoding="UTF-8"?>
<template>
	<name>gradleBuild</name>
	<filePath>/</filePath>
	<fileName>build.gradle</fileName>
	<content><![CDATA[
buildscript {
    repositories {
        maven { 
            url aliyun_repo
        }
    }
    
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${r'${spring_boot_version}'}"
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'java'

repositories {
    maven { 
        url aliyun_repo
    }
}

jar {
    baseName = jar_name
    version =  jar_version
}

group = group_name
    
sourceCompatibility = java_version
targetCompatibility = java_version
    
configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}
    
dependencies {
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile "org.springframework.boot:spring-boot-starter-aop"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	<#if components?seq_contains("localsecurity")>
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "io.jsonwebtoken:jjwt:${r'$'}{jwt_version}"
	</#if>
    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:${r'$'}{mybatis_spring_version}'
    
    compile "com.fasterxml.jackson.module:jackson-module-jsonSchema:${r'$'}{jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${r'$'}{jackson_version}"
    compile "io.springfox:springfox-swagger2:${r'$'}{swagger_version}"
  	compile "io.springfox:springfox-swagger-ui:${r'$'}{swagger_version}"
    compile "com.alibaba:druid-spring-boot-starter:${r'$'}{druid_version}"
    <#if hasOracle == "1">
    compile "com.oracle:ojdbc6:${r'$'}{oracle_version}"
    </#if>
    <#if hasMysql == "1">
    compile "mysql:mysql-connector-java:${r'$'}{mysql_version}"
    </#if>
 
 	<#if components?seq_contains("rescentersecurity")>
    compile "com.changan:spring-boot-starter-rescenter-rest:${r'$'}{rescenter_rest_version}"
    </#if>
    compile "com.google.guava:guava:${r'$'}{guava_version}"
    compile "org.jadira.usertype:usertype.core:${r'$'}{usertype_version}"
    compile "org.projectlombok:lombok:${r'$'}{lombok_version}"
    compile "org.hotpotmaterial:hotpotmaterial-common:${r'$'}{hotpotmaterial_common_version}"
    compile "org.mybatis:mybatis-typehandlers-jsr310:${r'$'}{mybatis_typehandlers_jsr310_version}"
    compile "com.github.pagehelper:pagehelper:${r'$'}{pagehelper_version}"
    compile "com.github.pagehelper:pagehelper-spring-boot-starter:${r'$'}{pagehelper_spring_boot_starter_version}"
    compile "org.hibernate:hibernate-java8:${r'$'}{hibernate_java8_version}"
    
    compile "org.hotpotmaterial:hotpotmaterial-jsonmeta:${r'$'}{hotpotmaterial_jsonmeta_version}"
    compile "org.apache.poi:poi:3.17"
    compile "org.apache.poi:poi-ooxml:3.17"
    
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

springBoot {
    mainClass = '${packageName}<#if moduleName != "">.${moduleName}</#if>.Application'
}
    
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task createJavaProject << {
    sourceSets*.java.srcDirs*.each {
        it.mkdirs()
    }
    sourceSets*.resources.srcDirs*.each {
        it.mkdirs()
    }
}

task wrapper(type: Wrapper) {
  gradleVersion = gradle_version
}
]]>
	</content>
</template>