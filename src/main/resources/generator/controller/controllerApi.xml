<?xml version="1.0" encoding="utf-8"?>
<template>
  <name>controllerApi</name>
  <filePath>src/main/java/${packageName}/${moduleName}/controller/${versionName}</filePath>
  <fileName>${controllerName}Api.java</fileName>
  <content><![CDATA[
package ${packageName}<#if moduleName != "">.${moduleName}</#if>.controller.${versionName};

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

<#list importIFPackageList as package>
import ${package};
</#list>

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

/** 
 * 
 * @author TitanCode2
 * @version  
 * @since JDK 1.8 
 */
@Api(value = "${controllerName}", description = "the ${controllerName} API")
@RequestMapping(value = "${basePath}")
public interface ${controllerName}Api {
  
  <#list apiObjList as apiObj>
  /**
   * ${apiObj.summary}
   */
  @ApiOperation(value = "${apiObj.summary}", notes = "${apiObj.description}", response = ${apiObj.responseObjNameNoPack}.class,
      tags = {"${apiObj.tag}"})
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回操作成功信息", response = ${apiObj.responseObjNameNoPack}.class),
          @ApiResponse(code = 200, message = "返回错误信息", response = ${apiObj.responseObjNameNoPack}.class)})
  @RequestMapping(value = "/${apiObj.uri}", produces = {"${apiObj.produces}"},
      method = RequestMethod.${apiObj.requestMethod})
  ResponseEntity<ResultDTO> ${apiObj.name}(<#list apiObj.apiParam as apiParam>@ApiParam(value = "${apiParam.name}", required = <#if apiParam.isRequired == "1">true<#else>false</#if>) ${apiParam.formAnnotation} ${apiParam.paramObj} ${apiParam.name}<#if (apiParam_has_next)>, </#if></#list>);
  </#list>
  
}
]]>
  </content>
</template>