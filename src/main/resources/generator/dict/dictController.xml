<?xml version="1.0" encoding="utf-8"?>
<template>
  <name>dictController</name>
  <filePath>src/main/java/${packageName}/${moduleName}/controller/dict</filePath>
  <fileName>DictApiController.java</fileName>
  <content><![CDATA[
package ${packageName}<#if moduleName != "">.${moduleName}</#if>.controller.dict;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.MediaType;

import org.hotpotmaterial.anywhere.common.mvc.page.rest.request.PageDTO;
import org.hotpotmaterial.anywhere.common.mvc.page.rest.response.ResultPageDTO;
import org.hotpotmaterial.anywhere.common.mvc.rest.basic.ResultDTO;
import ${packageName}.common.RestStatus;
import ${packageName}.dto.dict.ResultDictDTO;
import ${packageName}.entity.${datasourceName}.DictTypePO;
import ${packageName}.entity.${datasourceName}.DictValuePO;
import ${packageName}.service.dict.IDictService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiParam;

/**
 * DictApiController
 * @author xuyufeng
 *
 */
@Controller
@Api(value = "Dict", description = "the Dict API")
@RequestMapping(value = "/api/dict")
public class DictApiController{

  /**
   * 注入IDictService
   */
  @Autowired
  IDictService iDictService;
 
  /**
   * 查询DictType和DictValue
   */
  @ApiOperation(value = "实体ddemo.DictTypePO关联dict_value详情", notes = "实体ddemo.DictTypePO关联dict_value详情", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/dict_values/all", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.POST)
  public ResponseEntity<ResultDTO> DictPost(@RequestParam int version) {
    return new ResponseEntity<ResultDTO>(iDictService.findAll(version)
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 新增DictType
   */
  @ApiOperation(value = "实体ddemo.DictTypePO新增", notes = "实体ddemo.DictTypePO新增", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.POST)
  public ResponseEntity<ResultDTO> DictTypePost(@RequestBody DictTypePO dictType) {
    //保存DictType
    iDictService.insertDictType(dictType);
    return new ResponseEntity<ResultDTO>(new ResultDTO()
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 删除DictType
   */
  @ApiOperation(value = "实体ddemo.DictTypePO删除", notes = "实体ddemo.DictTypePO删除", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{dictTypeId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.DELETE)
  public ResponseEntity<ResultDTO> DictTypeDelete(@PathVariable String dictTypeId) {
    //根据id删除DictType
    iDictService.deleteDictType(dictTypeId);
    return new ResponseEntity<ResultDTO>(new ResultDTO()
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 修改DictType
   */
  @ApiOperation(value = "实体ddemo.DictTypePO修改", notes = "实体ddemo.DictTypePO修改", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{dictTypeId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.PUT)
  public ResponseEntity<ResultDTO> DictTypePut(@PathVariable String dictTypeId,@RequestBody DictTypePO dictType) {
    //修改DictType
    iDictService.updateDictType(dictTypeId,dictType);
    return new ResponseEntity<ResultDTO>(new ResultDTO()
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 新增DictValue
   */
  @ApiOperation(value = "实体ddemo.DictTypePO关联dict_value新增", notes = "实体ddemo.DictTypePO关联dict_value新增", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{code}/dict_values", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.POST) 
  public ResponseEntity<ResultDTO> DictValuePost(@PathVariable String code, @RequestBody DictValuePO dictValue) {
    // 新增DictValue
    iDictService.insertDictValue(code,dictValue);
    return new ResponseEntity<ResultDTO>(new ResultDTO()
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 修改DictValue
   */
  @ApiOperation(value = "实体ddemo.DictTypePO关联dict_value修改", notes = "实体ddemo.DictTypePO关联dict_value修改", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{code}/dict_values/{dictValueId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.PUT)
  public ResponseEntity<ResultDTO> DictValuePut(@PathVariable String dictValueId, @PathVariable String code, @RequestBody DictValuePO dictValue) {
    //修改DictValue
    iDictService.updateDictValue(dictValueId,dictValue);
    return new ResponseEntity<ResultDTO>(new ResultDTO()
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 删除DictValue
   */
  @ApiOperation(value = "实体ddemo.DictTypePO关联dict_value删除", notes = "实体ddemo.DictTypePO关联dict_value删除", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{code}/dict_values/{dictValueId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.DELETE)
  public ResponseEntity<ResultDTO> DictValueDelete(@PathVariable String code,@PathVariable String dictValueId) {
    //删除DictValue
    iDictService.deleteDictValue(dictValueId);
    return new ResponseEntity<ResultDTO>(new ResultDTO()
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 根据id查询DictType
   */
  @ApiOperation(value = "实体ddemo.DictTypePO详情", notes = "实体ddemo.DictTypePO详情", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{dictTypeId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.GET)
  public ResponseEntity<ResultDTO> DictTypeShow(@PathVariable String dictTypeId) {
    //根据id查询DictType
    return new ResponseEntity<ResultDTO>(new ResultDictDTO().DictType(iDictService.findDictType(dictTypeId))
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 根据id查询DictValue
   */
  @ApiOperation(value = "实体ddemo.DictTypePO关联dict_value详情", notes = "实体ddemo.DictTypePO关联dict_value详情", response = ResultDictDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultDictDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{code}/dict_values/{dictValueId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.GET)
  public ResponseEntity<ResultDTO> DictValueShow(@PathVariable String code,@PathVariable String dictValueId) {
    //根据id查询DictValue
    return new ResponseEntity<ResultDTO>(new ResultDictDTO().DictValue(iDictService.findDictValue(dictValueId))
        .message(RestStatus.RESULT_SUCCESS.message()).statusCode(RestStatus.RESULT_SUCCESS.code()),HttpStatus.OK);
  }

  /**
   * 分页查询DictType
   * @param searchParams
   * @return
   */
  @ApiOperation(value = "实体ddemo.DictTypePO分页列表", notes = "实体ddemo.DictTypePO分页列表", response = ResultPageDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultPageDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/pages", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.POST)
  public ResponseEntity<ResultDTO> dictTypePagesPost(@RequestBody PageDTO searchParams) {
    return new ResponseEntity<ResultDTO>(iDictService.getDictTypeList(searchParams).message(RestStatus.RESULT_SUCCESS.message())
        .statusCode(RestStatus.RESULT_SUCCESS.code()), HttpStatus.OK);
  }

  /**
   * 分页查询DictValue
   */
  @ApiOperation(value = "实体ddemo.DictTypePO关联dict_value分页列表", notes = "实体ddemo.DictTypePO关联dict_value分页列表", response = ResultPageDTO.class)
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "返回结果信息", response = ResultPageDTO.class),
          @ApiResponse(code = 401, message = "返回认证错误信息")})
  @RequestMapping(value = "/dict_type/{code}/dict_values/pages", produces = MediaType.APPLICATION_JSON_UTF8_VALUE,method = RequestMethod.POST)
  public ResponseEntity<ResultDTO> dictValuePagesPost(@PathVariable String code ,@RequestBody PageDTO searchParams) {
    return new ResponseEntity<ResultDTO>(iDictService.getDictValueList(code,searchParams).message(RestStatus.RESULT_SUCCESS.message())
        .statusCode(RestStatus.RESULT_SUCCESS.code()), HttpStatus.OK);
  }
}

]]>
  </content>
</template>