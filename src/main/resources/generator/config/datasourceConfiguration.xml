<?xml version="1.0" encoding="utf-8"?>
<template>
  <name>datasourceConfiguration</name>
  <filePath>src/main/java/${packageName}/${moduleName}/config</filePath>
  <fileName>${datasource.upperCamelPackageName}DatasourceConfiguration.java</fileName>
  <content><![CDATA[
package ${packageName}<#if moduleName != "">.${moduleName}</#if>.config;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.ibatis.session.AutoMappingBehavior;
import org.apache.ibatis.session.ExecutorType;
import org.apache.ibatis.session.LocalCacheScope;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.type.JdbcType;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.annotation.TransactionManagementConfigurer;

import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;
<#if dbcount gt 1>
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import org.apache.ibatis.session.AutoMappingBehavior;
import org.apache.ibatis.session.ExecutorType;
import org.apache.ibatis.session.LocalCacheScope;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.type.JdbcType;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageInterceptor;

import ${packageName}.common.BaseEntity;
</#if>

/** 
 * 数据源配置 - ${datasource.upperCamelPackageName}DatasourceConfiguration 
 *
 * @author TitanCode2
 */
@Configuration
@EnableTransactionManagement
@MapperScan(basePackages = {"${packageName}.dao"<#if components?seq_contains("dictionary") && !components?seq_contains("undictionary")>, "org.hotpotmaterial.dict.mapper"</#if>},
    sqlSessionFactoryRef = "<#if dbcount == 1>sqlSessionFactory<#else>${datasource.lowerCamelPackageName}SqlSessionFactory</#if>")
public class ${datasource.upperCamelPackageName}DatasourceConfiguration implements TransactionManagementConfigurer {

  /**
   * 配置数据源
   * 
   * @return
   * @throws Exception
   */
  @Bean(name = "${datasource.lowerCamelPackageName}DataSource")
  @ConfigurationProperties("spring.datasource.druid.${datasource.name}")
  public DataSource dataSource() {
    DruidDataSource dataSource = DruidDataSourceBuilder.create().build();

    try {
      dataSource.setFilters("stat,wall");
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return dataSource;
  }

  <#if dbcount gt 1>
  /**
   * 配置数据源连接会话
   * 
   * @return
   * @throws Exception
   */
  @Bean(name = "${datasource.lowerCamelPackageName}SqlSessionFactory")
  public SqlSessionFactory sqlSessionFactoryBean() throws Exception {
    // 新建mybatis
    SqlSessionFactoryBean sessionBean = new SqlSessionFactoryBean();
    // 给mybatis设置数据源
    sessionBean.setDataSource(dataSource());
    // 配置typeAliasesPackage
    sessionBean.setTypeAliasesPackage("org.hotpotmaterial.testproj.entity.${datasource.packageName}");
    sessionBean.setTypeAliasesSuperType(BaseEntity.class);
    sessionBean.setConfiguration(mybatisConfig());
    // 配置扫描xml文件所在的路径
    PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
    // 以通配符的方式配置mybatis xml的扫描路径
    List<Resource> resources = new ArrayList<Resource>();
    Resource[] mappersfirst = resolver.getResources("classpath:/mappings/*.xml");
    Resource[] mapperssec = resolver.getResources("classpath:/mappings/**/*.xml");
    resources.addAll(Arrays.asList(mappersfirst));
    resources.addAll(Arrays.asList(mapperssec));
    sessionBean.setMapperLocations(resources.toArray(new Resource[resources.size()]));
    // 返回数据库连接会话
    return sessionBean.getObject();

  }

  /**
   * 配置mybatis
   * 
   * @return
   * @throws Exception
   */
  public org.apache.ibatis.session.Configuration mybatisConfig() {
    org.apache.ibatis.session.Configuration configuration =
        new org.apache.ibatis.session.Configuration();

    configuration.setCacheEnabled(true);
    configuration.setLazyLoadingEnabled(true);
    configuration.setAggressiveLazyLoading(true);
    configuration.setMultipleResultSetsEnabled(true);
    configuration.setUseColumnLabel(true);
    configuration.setUseGeneratedKeys(false);
    configuration.setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);
    configuration.setDefaultExecutorType(ExecutorType.SIMPLE);
    configuration.setMapUnderscoreToCamelCase(true);
    configuration.setLocalCacheScope(LocalCacheScope.SESSION);
    configuration.setJdbcTypeForNull(JdbcType.NULL);

    configuration.getTypeAliasRegistry().registerAlias("Page", Page.class);

    // PageHelper pager = new PageHelper();
    PageInterceptor pageInterceptor = new PageInterceptor();

    Properties p = new Properties();
    p.put("helperDialect", "mysql");
    p.put("offsetAsPageNum", "true");
    p.put("rowBoundsWithCount", "true");
    p.put("pageSizeZero", "true");
    p.put("reasonable", "true");

    pageInterceptor.setProperties(p);
    configuration.addInterceptor(pageInterceptor);

    return configuration;

  }
  </#if>
  
  /**
   * 事务管理器接口实现
   */
  @Bean(name = "${datasource.lowerCamelPackageName}TransactionManager")
  @Override
  @Order(value = 1)
  public PlatformTransactionManager annotationDrivenTransactionManager() {
    // 新建事务管理器
    DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();
    // 将动态数据源加入事务管理器
    transactionManager.setDataSource(dataSource());
    // 返回事务管理器
    return transactionManager;
  }
}

]]>
  </content>
</template>