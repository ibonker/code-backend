<?xml version="1.0" encoding="utf-8"?>
<template>
  <name>LoginFilter</name>
  <filePath>src/main/java/${packageName}/security/filter</filePath>
  <fileName>LoginFilter.java</fileName>
  <content><![CDATA[
package ${packageName}.security.filter;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.databind.ObjectMapper;
import ${packageName}.security.ResProperties;
import ${packageName}.security.dto.CurrentUserDTO;
import ${packageName}.security.dto.LoginResponseDTO;
import ${packageName}.security.dto.UserInfo;
import ${packageName}.security.service.IUserTokenService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class LoginFilter extends UsernamePasswordAuthenticationFilter {
  
  private AuthenticationManager authenticationManager;
  
  private IUserTokenService tokenService;
  
  private ResProperties resp;
  
  public LoginFilter(AuthenticationManager authenticationManager,  IUserTokenService tokenService, ResProperties resp) {
    this.authenticationManager = authenticationManager;
    this.tokenService = tokenService;
    this.resp = resp;
  }

  // 接收并解析用户凭证
  @Override
  public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse res)
      throws AuthenticationException {
    String userId = (String)req.getParameter("username");
    String password = (String)req.getParameter("password");
    
    RestTemplate rest = new RestTemplate();
    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://" + resp.getServer() + "/rescenter-rest/ResCenterApi/userLogin").queryParam("LoginID", userId).queryParam("Password", password);
    ResponseEntity<String> result = rest.getForEntity(builder.toUriString(), String.class);
    String token = "";
    try {
      JSONObject jo = new JSONObject(result.getBody());
      JSONObject data = jo.getJSONObject("data");
      if (data.getBoolean("isSuccess")) {
        token = jo.getJSONObject("data").getString("msg");
      } else {
        throw new UsernameNotFoundException(data.getString("msg"));
      }
    } catch (JSONException e) {
      log.error("资源中心登录，获取数据解析json错误！");
    }
    return authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
        token, password, new ArrayList<>()));
  }

  // 用户成功登录后，这个方法会被调用，我们在这个方法里生成token
  @Override
  protected void successfulAuthentication(HttpServletRequest req, HttpServletResponse res,
      FilterChain chain, Authentication auth) throws IOException, ServletException {
    
    //从Authentication中获取用户
    Object principal = auth.getPrincipal();
    // 初始化当前登录用户对象
    CurrentUserDTO currentUser = new CurrentUserDTO();
    if (principal != null && principal instanceof UserInfo) {
      UserInfo user = (UserInfo) principal;
      user.setPassword(null);
      String token = tokenService.createToken(user);
      tokenService.put(token, user);
      res.setHeader("AUTH_TOKEN", token);
      
      //设值当前用户登录名
      currentUser.setUsername(user.getUsername());
      currentUser.setId(user.getId());
      currentUser.setOrgId(user.getOrgId());
      currentUser.setOrgName(user.getOrgName());
      currentUser.setName(user.getName());
      currentUser.setOrgFullName(user.getOrgFullName());
    }
    
    //设值ContentType
    res.setContentType("application/json;charset=UTF-8");
    //初始化RESPONSE BODY的对象
    LoginResponseDTO result = new LoginResponseDTO();
    result.setSuccess(true);
    //设置HTTP CODE
    result.setStatus(res.getStatus());
    //将当前用户放入RESPONSE中
    result.setData(currentUser);
    //用PrintWriter写入RESPONSE
    PrintWriter out = null;
    //转JSON
    ObjectMapper mapper = new ObjectMapper();
    //将LoginResponseDTO转为JSON字符串
    String resultJson = mapper.writeValueAsString(result);
    try {
      //获取PrintWriter
      out = res.getWriter();
      //写入
      out.append(resultJson);
    } catch (IOException e) {
      log.error("", e);
    } finally {
      if (out != null) {
        //关闭PrintWriter
        out.close();
      }
    }
  }
  
  @Override
  protected void unsuccessfulAuthentication(HttpServletRequest request,
      HttpServletResponse response, AuthenticationException failed)
      throws IOException, ServletException {
    SecurityContextHolder.clearContext();

    //设置ContentType
    response.setContentType("application/json;charset=UTF-8");
    //设置HTTP协议CODE
    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
    //初始化RESPONSE消息体的对象
    LoginResponseDTO result = new LoginResponseDTO();
    result.setSuccess(true);
    //返回状态403
    result.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
    //设置错误消息
    result.setErrorMessage(failed.getMessage());
    //写入RESPONSE
    PrintWriter out = null;
    //转JSON
    ObjectMapper mapper = new ObjectMapper();
    //将RESULT对象转为JSON字符串
    String resultJson = mapper.writeValueAsString(result);
    try {
      //写入RESPONSE
      out = response.getWriter();
      out.append(resultJson);
    } catch (IOException e) {
      log.error("", e);
    } finally {
      if (out != null) {
        //关闭WRITER
        out.close();
      }
    }
  }
}


]]>
  </content>
</template>