<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>uiconfigServiceImpl</name>
	<filePath>src/main/java/${packageName}/service/other/impl</filePath>
	<fileName>UiConfigServiceImpl.java</fileName>
	<content><![CDATA[
package ${packageName}.service.other.impl;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.hotpotmaterial.anywhere.common.utils.FileUtils;
import ${packageName}.common.RestStatus;
import ${packageName}.exception.CodeCommonException;
import ${packageName}.service.other.IUiConfigService;
import ${packageName}.cache.UICache;
	
	
/**
 * 前端配置文件业务接口声明实现类（文件保存）
 * @author TitanCode2
 */
@Service("OtherUiConfigService")
public class UiConfigServiceImpl implements IUiConfigService {
  
  // 文件路径
  @Value("${r'$'}{uiconfig.path}")
  private String configPath;
  // 注入缓存bean
  @Autowired
  private UICache uiCache;

  @Override
  public Map<String, Object> getUiConfig(String version) {
    // 如果版本号相同返回空,否则返回内存数据
    if (uiCache.getUIMap().get("version").toString().equals(version)) {
      return null;
    } else {
      return uiCache.getUIMap();
    }
  }

  @Override
  public void saveUiConfig(String data) {
    // 配置文件
    FileUtils.createFile(configPath);
    // 获取内存版本号
    int version = Integer.valueOf(uiCache.getUIMap().get("version").toString());
    // 将配置写入文件
    try {
      Writer writer =
          new BufferedWriter(new OutputStreamWriter(new FileOutputStream(configPath), "UTF-8"));
      writer.write(data.replace("'", "\""));
      writer.close();
    } catch (Exception e) {
      // 抛出异常
      throw new CodeCommonException(RestStatus.RESULT_SYSTEM_ERROR.code(),
          RestStatus.RESULT_SYSTEM_ERROR.message(), e);
    }
    // 更新内存数据
    uiCache.getUiConfig();
    // 更新内存版本号
    uiCache.getUIMap().put("version", version+1);
  }

}
	]]>
	</content>
</template>