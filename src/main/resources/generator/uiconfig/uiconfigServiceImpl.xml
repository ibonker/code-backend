<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>uiconfigServiceImpl</name>
	<filePath>src/main/java/${packageName}/service/uiconfig/impl</filePath>
	<fileName>UiConfigServiceImpl.java</fileName>
	<content><![CDATA[
package ${packageName}.service.uiconfig.impl;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import ${packageName}.service.uiconfig.IUiConfigService;
import ${packageName}.dao.uiconfig.UiconfigMapper;
import ${packageName}.service.uiconfig.impl.UICache;

import lombok.extern.slf4j.Slf4j;

import ${packageName}.entity.${datasourceName}.UiConfigPO;

/**
 * 前端配置文件业务接口声明实现类（文件保存）
 * @author Hotpotmaterial-Code2
 */
@Service("UiConfigService")
@Slf4j
public class UiConfigServiceImpl implements IUiConfigService {
  
  // 注入缓存bean
  @Autowired
  private UICache uiCache;

  // 注入mapper
  @Autowired
  private UiconfigMapper uiConfigPOMapper;

  /**
   * 根据版本获取ui配置
   */
  @Override
  public Map<String, Object> getUiConfig(String version) {
    // 如果版本号相同返回空,否则返回内存数据
    if (uiCache.getUIMap().get("version").toString().equals(version)) {
      return null;
    } else {
      return uiCache.getUIMap();
    }
  }
  
  /**
   * 保存数据
   */
  @Override
  public void saveUiConfig(String data) {
    ObjectMapper om = new ObjectMapper();
    try {
      UiConfigPO uipo = om.readValue(data, UiConfigPO.class);
      if (this.findById(uipo.getId()) != null) {
        this.updateUiConfig(uipo.getId(), uipo);
      } else {
        this.insertUiConfig(uipo);
      }
    } catch (IOException e) {
      log.error(e.getMessage());
    }
    // 获取内存版本号
    int version = Integer.valueOf(uiCache.getUIMap().get("version").toString());
    this.initUiConfig();
    uiCache.getUIMap().put("version", version + 1);
  }

  /**
   * 新增
   */
  @Override
  public int insertUiConfig(UiConfigPO uiConfig) {
    // 设置值
    uiConfig.preInsert();
    return uiConfigPOMapper.insertSelective(uiConfig);
  }

  /**
   * 修改
   */
  @Override
  public int updateUiConfig(String id, UiConfigPO uiConfig) {
    uiConfig.preUpdate();
    uiConfig.setId(id);
    return uiConfigPOMapper.updateByPrimaryKeySelective(uiConfig);
  }
  
  /**
   * 获取详情
   */
  @Override
  public UiConfigPO findById(String id) {
    return uiConfigPOMapper.selectByPrimaryKey(id);
  }
  
  /**
   * 缓存UIconfig
   */
  @PostConstruct
  public void initUiConfig() {
    // 读取数据库
    List<UiConfigPO> all = uiConfigPOMapper.selectAllConfig();
    // 保存到缓存
    uiCache.saveConfigToCache(all);
  }

}
	]]>
	</content>
</template>