<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>MenuCache</name>
	<filePath>src/main/java/${packageName}/cache</filePath>
	<fileName>MenuCache.java</fileName>
	<content><![CDATA[
package ${packageName}.cache;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import ${packageName}.common.RestStatus;
import ${packageName}.exception.CodeCommonException;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class MenuCache {
  
  @Value("${r'$'}{uiconfig.menuPath}")
  private String menuPath;

  //初始化版本号
  private int version = 0;
  
  //构建缓存容器
  private Map <String, Object> MenuMap = new HashMap<>();
  
  /**
   * 缓存UIconfig
   */
  @PostConstruct
  public void getMenuConfig() {
    System.out.print("进入Menu缓存！");
    File file = new File(menuPath);
    StringBuilder sb = new StringBuilder();
    // 读取文件
    if (file.exists()) {
      try (BufferedReader br =
          new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"))) {
        String line = "";
        while ((line = br.readLine()) != null) {
          sb.append(line);
        }
      } catch (IOException e) {
        // 抛出异常
        throw new CodeCommonException(RestStatus.RESULT_SYSTEM_ERROR.code(),
            RestStatus.RESULT_SYSTEM_ERROR.message(), e);
      }
    }

    // 解析文件内容到json node
    ObjectMapper mapper = new ObjectMapper();
    JsonFactory factory = mapper.getFactory();
    JsonParser parser;
    JsonNode actualObj = null;
    try {
      parser = factory.createParser(sb.toString());
      actualObj = mapper.readTree(parser);
    } catch (IOException e) {
      // 抛出异常
      throw new CodeCommonException(RestStatus.RESULT_SYSTEM_ERROR.code(),
          RestStatus.RESULT_SYSTEM_ERROR.message(), e);
    }
    MenuMap.put("actualObj", actualObj);
    MenuMap.put("version", version);
  }
  
  public Map <String, Object> getMenuMap(){
    return this.MenuMap;
  }
}
	]]>
	</content>
</template>