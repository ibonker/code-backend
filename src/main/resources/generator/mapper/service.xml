<?xml version="1.0" encoding="utf-8"?>
<template>
  <name>service</name>
  <filePath>src/main/java/${packageName}/service/${moduleName}</filePath>
  <fileName>I${className}Service.java</fileName>
  <content><![CDATA[
package ${packageName}.service.${moduleName};

import com.changan.anywhere.common.mvc.page.rest.request.PageDTO;
import com.changan.anywhere.common.mvc.page.rest.response.ResultPageDTO;
import ${packageName}.<#if isSenior>dto<#else>entity</#if>.${moduleName}.${className}<#if isSenior>DTO<#else>PO</#if>;
import com.changan.jsonmeta.JsonSchema;
import ${packageName}.dto.excel.ExcelReportDTO;
import ${packageName}.dto.excel.ExcelImportDTO;
<#if className == 'UiConfig'>
import java.util.Map;
</#if>

/**
 * @author TitanCode2 
 * 业务接口声明 - I${className}Service
 */
public interface I${className}Service {

  /**
   * 获取${className}的jsonschema
   * 
   * @return
   */
  public JsonSchema get${className}JsonSchema(String url);

  <#if isSenior>
  <#list seniorRelations as relation> 
  /**
   * 通过参数获取数据
   * 
   * @param _parameter
   * @return
   */
  public ResultPageDTO<${className}DTO> get${className}ListByRelation${relation_index + 1}(PageDTO page);
  </#list>
  <#else>
  /**
   * datatable 分页查询
   * 
   * @param page
   * @return
   */
  public ResultPageDTO<${className}PO> get${className}List(PageDTO page);
  
  /**
   * 导入
   * 
   * @param appInfo
   * @return
   */
  public ExcelReportDTO importExcel${className}(ExcelImportDTO excelDTO);
  <#if className == 'UiConfig'>	
  /**
   * 获取ui配置
   * @return
   */
  public Map<String, Object> getUiConfig(String version);

  /**
   * 保存ui配置
   * @param data
   */
  public void saveUiConfig(String data);
  </#if>
    
  /**
   * 新增
   * 
   * @param ${lowerName}
   * @return
   */
  public int insert${className}(${className}PO ${lowerName});
    
  /**
   * 修改
   * 
   * @param ${lowerName}
   * @return
   */
  public int update${className}(String id, ${className}PO ${lowerName});
    
  /**
   * 根据ID查找
   *  
   * @param id
   * @return
   */
  public ${className}PO findById(String id);
    
  /**
   * 删除
   * 
   * @param ${lowerName}
   */
  public int delete${className}(String id);
  
  <#list tableRelations as tableRelation>
  <#if 'One to One' == tableRelation.relation>
  /**
   * datatable 根据主表${tableRelation.masterTableNameCap}字段${tableRelation.masterColumnNameCap}查询详情
   * 
   * @param ${tableRelation.masterTableNameLower}${tableRelation.masterColumnNameCap}
   * @return
   */
  public ${className}PO findBy${tableRelation.masterTableNameCap}${tableRelation.masterColumnNameCap}(${tableRelation.masterColumnType} ${tableRelation.masterTableNameLower}${tableRelation.masterColumnNameCap});
  
  /**
   * datatable 根据主表${tableRelation.masterTableNameCap}字段${tableRelation.masterColumnNameCap}删除
   * 
   * @param ${tableRelation.masterTableNameLower}${tableRelation.masterColumnNameCap}
   * @return
   */
  public int deleteBy${tableRelation.masterTableNameCap}${tableRelation.masterColumnNameCap}(${tableRelation.masterColumnType} ${tableRelation.masterTableNameLower}${tableRelation.masterColumnNameCap});
  <#else>
  /**
   * @Description datatable 根据主表${tableRelation.masterTableNameCap}字段${tableRelation.masterColumnNameCap}分页查询
   * 
   * @param page
   * @return
   */
  public ResultPageDTO<${className}PO> get${className}ListBy${tableRelation.masterTableNameCap}${tableRelation.masterColumnNameCap}(${tableRelation.masterColumnType} ${tableRelation.masterTableNameLower}${tableRelation.masterColumnNameCap}, PageDTO page);
  </#if> 
   
  /**
   * 根据主表${tableRelation.masterTableNameCap}字段${tableRelation.masterColumnNameCap}新增
   * 
   * @param ${lowerName}
   * @return
   */
  public int insert${className}By${tableRelation.masterTableNameCap}${tableRelation.masterColumnNameCap}(${tableRelation.masterColumnType} ${tableRelation.masterTableNameLower}${tableRelation.masterColumnNameCap}, ${className}PO ${lowerName});
    
  /**
   * 根据主表${tableRelation.masterTableNameCap}字段${tableRelation.masterColumnNameCap}修改
   * 
   * @param ${lowerName}
   * @return
   */
  public int update${className}By${tableRelation.masterTableNameCap}${tableRelation.masterColumnNameCap}(${tableRelation.masterColumnType} ${tableRelation.masterTableNameLower}${tableRelation.masterColumnNameCap}<#if 'One to One' != tableRelation.relation>, String id</#if>, ${className}PO ${lowerName});
  </#list>
  </#if>
}
]]>
  </content>
</template>